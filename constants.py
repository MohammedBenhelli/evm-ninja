from binaryninja import SegmentFlag

from . import evm_instructions

LOGGER_SYMBOL = "EVM Ninja"

EVM_SWARM_HASH_PREFIX = b"\xa1\x65\x62\x7a\x7a\x72\x30\x58\x20"

EVM_SWARM_HASH_SUFFIX = b"\x00\x29"

EVM_SWARM_HASH_SEGMENT = (
        SegmentFlag.SegmentContainsData |
        SegmentFlag.SegmentDenyExecute |
        SegmentFlag.SegmentReadable |
        SegmentFlag.SegmentDenyWrite
)

EVM_CODE_SEGMENT = (
        SegmentFlag.SegmentReadable |
        SegmentFlag.SegmentExecutable
)

EVM_ADDR_SIZE: int = 32

EVM_BLOCK_END = [
    "STOP",
    "SELFDESTRUCT",
    "RETURN",
    "REVERT",
    "INVALID",
    "SUICIDE",
    "JUMP",
    "JUMPI",
]

EVM_FUNCTION_RETURN = [
    "RETURN",
    "REVERT",
    "SUICIDE",
    "INVALID",
    "STOP",
    "SELFDESTRUCT",
]

EVM_FUNCTION_EXCEPTION = [
    "REVERT",
    "INVALID",
    "STOP",
]

EVM_IMPURE_OPCODES = [
    "CREATE",
    "CREATE2",
    "CALL",
    "CALLCODE",
    "DELEGATECALL",
    "SELFDESTRUCT",
    "SSTORE",
    "ADDRESS",
    "BALANCE",
    "ORIGIN",
    "CALLER",
    "CALLVALUE",
    "CALLDATALOAD",
    "CALLDATASIZE",
    "CALLDATACOPY",
    "CODESIZE",
    "CODECOPY",
    "EXTCODESIZE",
    "EXTCODEHASH",
    "EXTCODECOPY",
    "RETURNDATASIZE",
    "RETURNDATACOPY",
    "BLOCKHASH",
    "COINBASE",
    "TIMESTAMP",
    "NUMBER",
    "DIFFICULTY",
    "GASLIMIT",
    "LOG0",
    "LOG1",
    "LOG2",
    "LOG3",
    "LOG4",
    "CALL",
    "CALLCODE",
    "DELEGATECALL",
    "STATICCALL",
    "SELFDESTRUCT",
    "SSTORE",
    "SLOAD",
]

EVM_CHANGE_STATE_OPCODES = [
    "CREATE",
    "CREATE2",
    "CALL",
    "CALLCODE",
    "DELEGATECALL",
    "SELFDESTRUCT",
    "SSTORE",
]

# Hex => [Mnemonic, inputs, outputs, cost, size]
EVM_OPCODES: dict = {
    "00": ["STOP", 0, 0, 0, 1],
    "01": ["ADD", 2, 1, 3, 1],
    "02": ["MUL", 2, 1, 5, 1],
    "03": ["SUB", 2, 1, 3, 1],
    "04": ["DIV", 2, 1, 5, 1],
    "05": ["SDIV", 2, 1, 5, 1],
    "06": ["MOD", 2, 1, 5, 1],
    "07": ["SMOD", 2, 1, 5, 1],
    "08": ["ADDMOD", 3, 1, 8, 1],
    "09": ["MULMOD", 3, 1, 8, 1],
    "0a": ["EXP", 2, 1, 10, 1],
    "0b": ["SIGNEXTEND", 2, 1, 5, 1],
    "0": ["STOP", 0, 0, 0, 1],
    "1": ["ADD", 2, 1, 3, 1],
    "2": ["MUL", 2, 1, 5, 1],
    "3": ["SUB", 2, 1, 3, 1],
    "4": ["DIV", 2, 1, 5, 1],
    "5": ["SDIV", 2, 1, 5, 1],
    "6": ["MOD", 2, 1, 5, 1],
    "7": ["SMOD", 2, 1, 5, 1],
    "8": ["ADDMOD", 3, 1, 8, 1],
    "9": ["MULMOD", 3, 1, 8, 1],
    "a": ["EXP", 2, 1, 10, 1],
    "b": ["SIGNEXTEND", 2, 1, 5, 1],
    "10": ["LT", 2, 1, 3, 1],
    "11": ["GT", 2, 1, 3, 1],
    "12": ["SLT", 2, 1, 3, 1],
    "13": ["SGT", 2, 1, 3, 1],
    "14": ["EQ", 2, 1, 3, 1],
    "15": ["ISZERO", 1, 1, 3, 1],
    "16": ["AND", 2, 1, 3, 1],
    "17": ["OR", 2, 1, 3, 1],
    "18": ["XOR", 2, 1, 3, 1],
    "19": ["NOT", 2, 1, 3, 1],
    "1a": ["BYTE", 2, 1, 3, 1],
    "1b": ["SHL", 2, 1, 3, 1],
    "1c": ["SHR", 2, 1, 3, 1],
    "1d": ["SAR", 2, 1, 3, 1],
    "20": ["SHA3", 2, 1, 30, 1],
    "30": ["ADDRESS", 0, 1, 2, 1],
    "31": ["BALANCE", 1, 1, 700, 1],
    "32": ["ORIGIN", 0, 1, 2, 1],
    "33": ["CALLER", 0, 1, 2, 1],
    "34": ["CALLVALUE", 0, 1, 2, 1],
    "35": ["CALLDATALOAD", 1, 1, 3, 1],
    "36": ["CALLDATASIZE", 0, 1, 2, 1],
    "37": ["CALLDATACOPY", 3, 0, 3, 1],
    "38": ["CODESIZE", 0, 1, 2, 1],
    "39": ["CODECOPY", 3, 0, 3, 1],
    "3a": ["GASPRICE", 0, 1, 2, 1],
    "3b": ["EXTCODESIZE", 1, 1, 2600, 1],
    "3c": ["EXTCODECOPY", 4, 0, 2600, 1],
    "3d": ["RETURNDATASIZE", 0, 1, 2, 1],
    "3e": ["RETURNDATACOPY", 3, 0, 3, 1],
    "3f": ["EXTCODEHASH", 1, 1, 2600, 1],
    "40": ["BLOCKHASH", 1, 1, 20, 1],
    "41": ["COINBASE", 0, 1, 2, 1],
    "42": ["TIMESTAMP", 0, 1, 2, 1],
    "43": ["NUMBER", 0, 1, 2, 1],
    "44": ["PREVRANDAO", 0, 1, 2, 1],
    "45": ["GASLIMIT", 0, 1, 2, 1],
    "46": ["CHAINID", 0, 1, 2, 1],
    "47": ["SELFBALANCE", 0, 1, 5, 1],
    "48": ["BASEFEE", 0, 1, 2, 1],
    "50": ["POP", 1, 0, 2, 1],
    "51": ["MLOAD", 1, 1, 3, 1],
    "52": ["MSTORE", 2, 0, 3, 1],
    "53": ["MSTORE8", 2, 0, 3, 1],
    "54": ["SLOAD", 1, 1, 2100, 1],
    "55": ["SSTORE", 2, 0, 20000, 1],
    "56": ["JUMP", 1, 0, 8, 1],
    "57": ["JUMPI", 2, 0, 10, 1],
    "58": ["PC", 0, 1, 2, 1],
    "59": ["MSIZE", 0, 1, 2, 1],
    "5a": ["GAS", 0, 1, 2, 1],
    "5b": ["JUMPDEST", 0, 0, 1, 1],
    "5c": ["TLOAD", 1, 1, 100, 1],
    "5d": ["TSTORE", 2, 0, 100, 1],
    "5f": ["PUSH0", 0, 1, 2, 1],
    "60": ["PUSH1", 0, 1, 3, 2],
    "61": ["PUSH2", 0, 1, 3, 3],
    "62": ["PUSH3", 0, 1, 3, 4],
    "63": ["PUSH4", 0, 1, 3, 5],
    "64": ["PUSH5", 0, 1, 3, 6],
    "65": ["PUSH6", 0, 1, 3, 7],
    "66": ["PUSH7", 0, 1, 3, 8],
    "67": ["PUSH8", 0, 1, 3, 9],
    "68": ["PUSH9", 0, 1, 3, 10],
    "69": ["PUSH10", 0, 1, 3, 11],
    "6a": ["PUSH11", 0, 1, 3, 12],
    "6b": ["PUSH12", 0, 1, 3, 13],
    "6c": ["PUSH13", 0, 1, 3, 14],
    "6d": ["PUSH14", 0, 1, 3, 15],
    "6e": ["PUSH15", 0, 1, 3, 16],
    "6f": ["PUSH16", 0, 1, 3, 17],
    "70": ["PUSH17", 0, 1, 3, 18],
    "71": ["PUSH18", 0, 1, 3, 19],
    "72": ["PUSH19", 0, 1, 3, 20],
    "73": ["PUSH20", 0, 1, 3, 21],
    "74": ["PUSH21", 0, 1, 3, 22],
    "75": ["PUSH22", 0, 1, 3, 23],
    "76": ["PUSH23", 0, 1, 3, 24],
    "77": ["PUSH24", 0, 1, 3, 25],
    "78": ["PUSH25", 0, 1, 3, 26],
    "79": ["PUSH26", 0, 1, 3, 27],
    "7a": ["PUSH27", 0, 1, 3, 28],
    "7b": ["PUSH28", 0, 1, 3, 29],
    "7c": ["PUSH29", 0, 1, 3, 30],
    "7d": ["PUSH30", 0, 1, 3, 31],
    "7e": ["PUSH31", 0, 1, 3, 32],
    "7f": ["PUSH32", 0, 1, 3, 33],
    "80": ["DUP1", 1, 2, 3, 1],
    "81": ["DUP2", 1, 2, 3, 1],
    "82": ["DUP3", 1, 2, 3, 1],
    "83": ["DUP4", 1, 2, 3, 1],
    "84": ["DUP5", 1, 2, 3, 1],
    "85": ["DUP6", 1, 2, 3, 1],
    "86": ["DUP7", 1, 2, 3, 1],
    "87": ["DUP8", 1, 2, 3, 1],
    "88": ["DUP9", 1, 2, 3, 1],
    "89": ["DUP10", 1, 2, 3, 1],
    "8a": ["DUP11", 1, 2, 3, 1],
    "8b": ["DUP12", 1, 2, 3, 1],
    "8c": ["DUP13", 1, 2, 3, 1],
    "8d": ["DUP14", 1, 2, 3, 1],
    "8e": ["DUP15", 1, 2, 3, 1],
    "8f": ["DUP16", 1, 2, 3, 1],
    "90": ["SWAP1", 2, 2, 3, 1],
    "91": ["SWAP2", 2, 2, 3, 1],
    "92": ["SWAP3", 2, 2, 3, 1],
    "93": ["SWAP4", 2, 2, 3, 1],
    "94": ["SWAP5", 2, 2, 3, 1],
    "95": ["SWAP6", 2, 2, 3, 1],
    "96": ["SWAP7", 2, 2, 3, 1],
    "97": ["SWAP8", 2, 2, 3, 1],
    "98": ["SWAP9", 2, 2, 3, 1],
    "99": ["SWAP10", 2, 2, 3, 1],
    "9a": ["SWAP11", 2, 2, 3, 1],
    "9b": ["SWAP12", 2, 2, 3, 1],
    "9c": ["SWAP13", 2, 2, 3, 1],
    "9d": ["SWAP14", 2, 2, 3, 1],
    "9e": ["SWAP15", 2, 2, 3, 1],
    "9f": ["SWAP16", 2, 2, 3, 1],
    "a0": ["LOG0", 2, 0, 375, 1],
    "a1": ["LOG1", 3, 0, 750, 1],
    "a2": ["LOG2", 4, 0, 1125, 1],
    "a3": ["LOG3", 5, 0, 1500, 1],
    "a4": ["LOG4", 6, 0, 1875, 1],
    "f0": ["CREATE", 3, 1, 32000, 1],
    "f1": ["CALL", 7, 1, 2100, 1],
    "f2": ["CALLCODE", 7, 1, 2100, 1],
    "f3": ["RETURN", 2, 0, 0, 1],
    "f4": ["DELEGATECALL", 6, 1, 2100, 1],
    "f5": ["CREATE2", 4, 1, 32000, 1],
    "fa": ["STATICCALL", 6, 1, 2100, 1],
    "fd": ["REVERT", 2, 0, 0, 1],
    "fe": ["INVALID", 0, 0, 0, 1],
    "ff": ["SELFDESTRUCT", 1, 0, 25000, 1],
}

# TODO: Add SLOAD, SSTORE, TLOAD, TSTORE...
EVM_OPCODES_EMULATION: dict = {
    "STOP": evm_instructions.stop,
    "ADD": evm_instructions.add,
    "MUL": evm_instructions.mul,
    "SUB": evm_instructions.sub,
    "DIV": evm_instructions.div,
    "SDIV": evm_instructions.sdiv,
    "MOD": evm_instructions.mod,
    "SMOD": evm_instructions.smod,
    "ADDMOD": evm_instructions.addmod,
    "MULMOD": evm_instructions.mulmod,
    "LT": evm_instructions.lt,
    "GT": evm_instructions.gt,
    "SLT": evm_instructions.slt,
    "SGT": evm_instructions.sgt,
    "EQ": evm_instructions.eq,
    "ISZERO": evm_instructions.iszero,
    "AND": evm_instructions.and_,
    "OR": evm_instructions.or_,
    "XOR": evm_instructions.xor,
    "NOT": evm_instructions.not_,
    "SHL": evm_instructions.shl,
    "SHR": evm_instructions.shr,
    "SAR": evm_instructions.sar,
    "ADDRESS": evm_instructions.address,
    "BALANCE": evm_instructions.balance,
    "ORIGIN": evm_instructions.origin,
    "CALLER": evm_instructions.caller,
    "CALLVALUE": evm_instructions.callvalue,
    "BLOCKHASH": evm_instructions.blockhash,
    "NUMBER": evm_instructions.number,
    "POP": evm_instructions.pop,
    "MLOAD": evm_instructions.mload,
    "MSTORE": evm_instructions.mstore,
    "MSTORE8": evm_instructions.mstore8,
    "SLOAD": evm_instructions.sload,
    "SSTORE": evm_instructions.sstore,
    "JUMP": evm_instructions.jump,
    "JUMPI": evm_instructions.jumpi,
    "TLOAD": evm_instructions.tload,
    "TSTORE": evm_instructions.tstore,
    "PUSH0": evm_instructions.push0,
    "PUSH1": evm_instructions.push,
    "PUSH2": evm_instructions.push,
    "PUSH3": evm_instructions.push,
    "PUSH4": evm_instructions.push,
    "PUSH5": evm_instructions.push,
    "PUSH6": evm_instructions.push,
    "PUSH7": evm_instructions.push,
    "PUSH8": evm_instructions.push,
    "PUSH9": evm_instructions.push,
    "PUSH10": evm_instructions.push,
    "PUSH11": evm_instructions.push,
    "PUSH12": evm_instructions.push,
    "PUSH13": evm_instructions.push,
    "PUSH14": evm_instructions.push,
    "PUSH15": evm_instructions.push,
    "PUSH16": evm_instructions.push,
    "PUSH17": evm_instructions.push,
    "PUSH18": evm_instructions.push,
    "PUSH19": evm_instructions.push,
    "PUSH20": evm_instructions.push,
    "PUSH21": evm_instructions.push,
    "PUSH22": evm_instructions.push,
    "PUSH23": evm_instructions.push,
    "PUSH24": evm_instructions.push,
    "PUSH25": evm_instructions.push,
    "PUSH26": evm_instructions.push,
    "PUSH27": evm_instructions.push,
    "PUSH28": evm_instructions.push,
    "PUSH29": evm_instructions.push,
    "PUSH30": evm_instructions.push,
    "PUSH31": evm_instructions.push,
    "PUSH32": evm_instructions.push,
    "DUP1": lambda il, addr, imm: evm_instructions.dup(il, addr, 1),
    "DUP2": lambda il, addr, imm: evm_instructions.dup(il, addr, 2),
    "DUP3": lambda il, addr, imm: evm_instructions.dup(il, addr, 3),
    "DUP4": lambda il, addr, imm: evm_instructions.dup(il, addr, 4),
    "DUP5": lambda il, addr, imm: evm_instructions.dup(il, addr, 5),
    "DUP6": lambda il, addr, imm: evm_instructions.dup(il, addr, 6),
    "DUP7": lambda il, addr, imm: evm_instructions.dup(il, addr, 7),
    "DUP8": lambda il, addr, imm: evm_instructions.dup(il, addr, 8),
    "DUP9": lambda il, addr, imm: evm_instructions.dup(il, addr, 9),
    "DUP10": lambda il, addr, imm: evm_instructions.dup(il, addr, 10),
    "DUP11": lambda il, addr, imm: evm_instructions.dup(il, addr, 11),
    "DUP12": lambda il, addr, imm: evm_instructions.dup(il, addr, 12),
    "DUP13": lambda il, addr, imm: evm_instructions.dup(il, addr, 13),
    "DUP14": lambda il, addr, imm: evm_instructions.dup(il, addr, 14),
    "DUP15": lambda il, addr, imm: evm_instructions.dup(il, addr, 15),
    "DUP16": lambda il, addr, imm: evm_instructions.dup(il, addr, 16),
    "SWAP1": lambda il, addr, imm: evm_instructions.swap(il, addr, 1),
    "SWAP2": lambda il, addr, imm: evm_instructions.swap(il, addr, 2),
    "SWAP3": lambda il, addr, imm: evm_instructions.swap(il, addr, 3),
    "SWAP4": lambda il, addr, imm: evm_instructions.swap(il, addr, 4),
    "SWAP5": lambda il, addr, imm: evm_instructions.swap(il, addr, 5),
    "SWAP6": lambda il, addr, imm: evm_instructions.swap(il, addr, 6),
    "SWAP7": lambda il, addr, imm: evm_instructions.swap(il, addr, 7),
    "SWAP8": lambda il, addr, imm: evm_instructions.swap(il, addr, 8),
    "SWAP9": lambda il, addr, imm: evm_instructions.swap(il, addr, 9),
    "SWAP10": lambda il, addr, imm: evm_instructions.swap(il, addr, 10),
    "SWAP11": lambda il, addr, imm: evm_instructions.swap(il, addr, 11),
    "SWAP12": lambda il, addr, imm: evm_instructions.swap(il, addr, 12),
    "SWAP13": lambda il, addr, imm: evm_instructions.swap(il, addr, 13),
    "SWAP14": lambda il, addr, imm: evm_instructions.swap(il, addr, 14),
    "SWAP15": lambda il, addr, imm: evm_instructions.swap(il, addr, 15),
    "SWAP16": lambda il, addr, imm: evm_instructions.swap(il, addr, 16),
    "REVERT": evm_instructions.revert,
    "RETURN": evm_instructions.return_,
    "INVALID": evm_instructions.invalid,
    "SUICIDE": evm_instructions.selfdestruct,
    "SELFDESTRUCT": evm_instructions.selfdestruct,
}
